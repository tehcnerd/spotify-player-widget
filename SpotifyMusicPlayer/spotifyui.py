# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'spotify.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PIL import Image, ImageFilter
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QPixmap, QImage
import sys
import spotifyapi
from io import BytesIO
import requests
import getname
import keyboard
from pycaw.pycaw import AudioUtilities, ISimpleAudioVolume
 
sessions = AudioUtilities.GetAllSessions()
def song_name(n):
    name = getname.get_spotify_title()
    name = name.split(" - ")
    return name[n]

class DraggableWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.oldPos = None
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    def mousePressEvent(self, event):
        self.oldPos = event.globalPos()
    def mouseMoveEvent(self, event):
        if self.oldPos:
            delta = QtCore.QPoint(event.globalPos() - self.oldPos)
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.oldPos = event.globalPos()

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setWindowModality(QtCore.Qt.NonModal)
        Form.resize(342, 342)
        Form.setMaximumSize(QtCore.QSize(342, 342))
        Form.setStyleSheet("background-color: rgba(30,30,30,0);")

        self.overlay = QtWidgets.QLabel(Form)
        self.overlay.setGeometry(QtCore.QRect(0, 0, 342, 342))
        self.overlay.setStyleSheet("background-color: rgba(30, 30, 30, 160); border-radius: 10px;")
        self.overlay.lower()

        self.album_coverbg = QtWidgets.QLabel(Form)
        self.album_coverbg.setGeometry(QtCore.QRect(10, 10, 321, 241))
        self.album_coverbg.setText("")
        self.album_coverbg.setScaledContents(True)
        self.album_coverbg.setObjectName("album_coverbg")
        url = spotifyapi.get_album_art()
        response = requests.get(url)
        img_data = BytesIO(response.content)
        pil_img = Image.open(img_data).convert("RGBA")
        blurred_img = pil_img.filter(ImageFilter.GaussianBlur(radius=15))
        blurred_bytes = blurred_img.tobytes("raw", "RGBA")
        w, h = blurred_img.size
        qimage = QImage(blurred_bytes, w, h, QImage.Format_RGBA8888)
        pixmap_bg = QPixmap.fromImage(qimage)
        self.album_coverbg.setPixmap(pixmap_bg)

        self.previous = QtWidgets.QLabel(Form)
        self.previous.setGeometry(QtCore.QRect(10, 260, 291, 41))
        self.previous.setStyleSheet("font: 16pt \"OCR A Extended\";\ncolor: rgb(255, 255, 255);\nbackground-color: rgba(0,0,0,0);")
        self.previous.setObjectName("previous")

        self.artistname = QtWidgets.QLabel(Form)
        self.artistname.setGeometry(QtCore.QRect(10, 310, 191, 20))
        self.artistname.setStyleSheet("color: rgba(229, 229, 229, 180);\nfont: 10pt \"MS Shell Dlg 2\";\nbackground-color: rgba(0,0,0,0);")
        self.artistname.setObjectName("Artist Name")

        self.musiccontrol = QtWidgets.QPushButton(Form)
        self.musiccontrol.setGeometry(QtCore.QRect(160, 221, 21, 20))
        self.musiccontrol.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/pause-32.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.musiccontrol.setIcon(icon)
        self.musiccontrol.setFlat(True)
        self.musiccontrol.setObjectName("musiccontrol")
        self.musiccontrol.clicked.connect(self.pause_play)
        self.default_control = "true"
        self.skip = QtWidgets.QPushButton(Form)
        self.skip.setGeometry(QtCore.QRect(200, 220, 21, 21))
        self.skip.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("img/media-skip-forward-32.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.skip.setIcon(icon1)
        self.skip.setFlat(True)
        self.skip.setObjectName("skip")
        self.skip.clicked.connect(self.skipsong)

        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(118, 220, 21, 21))
        self.pushButton_3.setText("")
        self.pushButton_3.clicked.connect(self.prevsong)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("img/media-skip-backward-32.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon2)
        self.pushButton_3.setFlat(True)
        self.pushButton_3.setObjectName("pushButton_3")

        self.albumcover = QtWidgets.QLabel(Form)
        self.albumcover.setGeometry(QtCore.QRect(80, 23, 181, 181))
        self.albumcover.setStyleSheet("border: 2px solid \"white\";\nborder-radius:5px;\nborder-left-color: rgb(180, 180, 180);\nborder-bottom-color: rgb(127, 127, 127);")
        self.albumcover.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.albumcover.setText("")
        self.albumcover.setObjectName("albumcover")
        image_url = spotifyapi.get_album_art()
        response = requests.get(image_url)
        pixmap = QPixmap()
        pixmap.loadFromData(response.content)
        pixmap = pixmap.scaled(181,181)
        self.albumcover.setPixmap(pixmap)

        self.verticalSlider = QtWidgets.QSlider(Form)
        self.verticalSlider.setGeometry(QtCore.QRect(300, 30, 22, 171))
        self.verticalSlider.setMaximum(100)
        self.verticalSlider.setProperty("value", 100)
        self.verticalSlider.setSliderPosition(100)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.verticalSlider.setStyleSheet("""QSlider::handle:vertical {
                                                background: rgba(255, 174, 31,255);
                                                height: 20px;
                                                border-radius: 4px;
                                                margin: 0 -4px;
                                            }
                                            QSlider::groove:vertical {
                                                background: rgba(255,255,255,180);
                                                width: 6px;
                                                border-radius: 3px;
                                            }""")
        self.slider_value = 100
        self.verticalSlider.valueChanged.connect(self.update_slider_val)

        self.album_coverbg.lower()
        self.musiccontrol.raise_()
        self.skip.raise_()
        self.pushButton_3.raise_()
        self.previous.raise_()
        self.artistname.raise_()
        self.albumcover.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # === NEW: song auto-update ===
        self.current_track = song_name(1)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.check_for_song_update)
        self.timer.start(1000)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Spotify Player"))
        self.previous.setText(_translate("Form", song_name(1)))
        self.artistname.setText(_translate("Form", song_name(0)))

    def pause_play(self):
        keyboard.send("play/pause media")
        if self.default_control == "true":
            self.default_control = "false"
        else:
            self.default_control = "true"
    def skipsong(self):
        keyboard.send("next track")

    def prevsong(self):
        keyboard.send("previous track")

    def update_slider_val(self, value):
        self.slider_value = value / 100
        for session in sessions:
            if session.Process and session.Process.name().lower() == "spotify.exe":
                volume = session._ctl.QueryInterface(ISimpleAudioVolume)
                volume.SetMasterVolume(self.slider_value, None)
                print(self.slider_value)
    def fade_widget(self, widget, duration=400):
        effect = QtWidgets.QGraphicsBlurEffect(widget)
        widget.setGraphicsEffect(effect)
        animation = QtCore.QPropertyAnimation(effect, b"blurRadius")
        animation.setDuration(duration)
        animation.setStartValue(10)
        animation.setEndValue(0)
        animation.start()
        widget._fade_animation = animation  # store to prevent garbage collection

    
    def check_for_song_update(self):
     if self.default_control == "true":
        new_track = song_name(1)
        if new_track != self.current_track:
            self.current_track = new_track
            self.previous.setText(new_track)
            self.artistname.setText(song_name(0))
            
            self.fade_widget(self.previous)
            self.fade_widget(self.artistname) 

            url = spotifyapi.get_album_art()
            response = requests.get(url)
            img_data = BytesIO(response.content)

            pil_img = Image.open(img_data).convert("RGBA")
            blurred_img = pil_img.filter(ImageFilter.GaussianBlur(radius=15))
            blurred_bytes = blurred_img.tobytes("raw", "RGBA")
            w, h = blurred_img.size
            qimage = QImage(blurred_bytes, w, h, QImage.Format_RGBA8888)
            pixmap_bg = QPixmap.fromImage(qimage)
            self.album_coverbg.setPixmap(pixmap_bg)
            self.fade_widget(self.album_coverbg)
            pixmap = QPixmap()
            pixmap.loadFromData(response.content)
            pixmap = pixmap.scaled(181, 181)
            self.albumcover.setPixmap(pixmap)
            self.fade_widget(self.albumcover)
        else :
            pass
            
if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = DraggableWidget()
    ui = Ui_Form()
    ui.setupUi(widget)
    widget.show()
    widget.move(2,451)
    sys.exit(app.exec_())
